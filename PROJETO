//https://api.themoviedb.org/3/discover/movie?api_key=5cfcb26280fab4a3855afa602bcee3e0

import 'package:flutter/material.dart';
import 'package:flutter_hooks/flutter_hooks.dart';
import 'package:http/http.dart' as http;
import 'dart:convert';

class DataService {
  final ValueNotifier<Map<String, dynamic>> tableStateNotifier =
      new ValueNotifier({
    "objects": [],
    "props": ["name", "style", "ibu"],
    "columns": ["Pressione", "Qualquer", "Icone"]
  });

  int selectedIndex = 0;
  void carregar(index) {
    var selectedIndex = index;
    if (index == 0) {
      carregarCafes();
    } else if (index == 1) {
      carregarCervejas();
    } else if (index == 2) {
      carregarNacoes();
    }
  }

  Future<void> carregarCervejas() async {
    var beersUri = Uri(
        scheme: 'https',
        host: 'api.themoviedb.org',
        path: '/3/discover/movie',
        queryParameters: {'api_key': '5cfcb26280fab4a3855afa602bcee3e0'});

    print('carregarCervejas #1 - antes do await');
    var jsonString = await http.read(beersUri);
    print('carregarCervejas #2 - depois do await');
    var beersJson = jsonDecode(jsonString);

    tableStateNotifier.value = {
      "objects": beersJson,
      "props": ["original_title", "genre_ids", "release_date"],
      "columns": ["Nome", "Gênero", "Lançamento"]
    };
  }

  Future<void> carregarNacoes() async {
    var nacoesUri = Uri(
      scheme: 'https',
      host: 'random-data-api.com',
      path: 'api/nation/random_nation',
      queryParameters: {'size': '5'},
    );

    print('carregarNacoes #1 - antes do await');
    var jsonString = await http.read(nacoesUri);
    print('carregarNacoes #2 - depois do await');
    var nacoesJson = jsonDecode(jsonString);

    tableStateNotifier.value = {
      "objects": nacoesJson,
      "props": ["nationality", "language", "capital"],
      "columns": ["Nacionalidade", "Lingua", "Capital"]
    };
  }

  Future<void> carregarCafes() async {
    var cafesUri = Uri(
      scheme: 'https',
      host: 'random-data-api.com',
      path: 'api/coffee/random_coffee',
      queryParameters: {'size': '5'},
    );

    print('carregarCafes #1 - antes do await');
    var jsonString = await http.read(cafesUri);
    print('carregarCafes #2 - depois do await');
    var cafesJson = jsonDecode(jsonString);

    tableStateNotifier.value = {
      "objects": cafesJson,
      "props": ["blend_name", "origin", "variety"],
      "columns": ["Nome", "Origem", "Variedade"]
    };
  }
}

final dataService = DataService();

void main() {
  MyApp app = MyApp();

  runApp(app);
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      theme: ThemeData(primarySwatch: Colors.deepPurple),
      debugShowCheckedModeBanner: false,
      home: Scaffold(
        appBar: AppBar(
          title: const Text("Dicas"),
        ),
        body: ValueListenableBuilder(
          valueListenable: dataService.tableStateNotifier,
          builder: (_, value, __) {
            //final jsonObjects = (value["objects"] as Map<String, dynamic>).values.toList();

            print(value);
            return DataTableWidget(
              jsonObjects: value["objects"],
              columnNames: value["columns"] as List<dynamic>,
              propertyNames: value["props"] as List<dynamic>,
            );
          },
        ),
        bottomNavigationBar: NewNavBar(
          itemSelectedCallback: dataService.carregar,
        ),
      ),
    );
  }
}

class NewNavBar extends HookWidget {
  final _itemSelectedCallback;

  NewNavBar({itemSelectedCallback})
      : _itemSelectedCallback = itemSelectedCallback ?? (int) {}

  @override
  Widget build(BuildContext context) {
    var state = useState(1);

    return BottomNavigationBar(
        onTap: (index) {
          state.value = index;

          _itemSelectedCallback(index);
        },
        currentIndex: state.value,
        items: const [
          BottomNavigationBarItem(
            label: "Cafés",
            icon: Icon(Icons.coffee_outlined),
          ),
          BottomNavigationBarItem(
              label: "Cervejas", icon: Icon(Icons.local_drink_outlined)),
          BottomNavigationBarItem(
              label: "Nações", icon: Icon(Icons.flag_outlined))
        ]);
  }
}

class DataTableWidget extends HookWidget {
  final List jsonObjects;
  final List columnNames;
  final List propertyNames;

  DataTableWidget({
    this.jsonObjects = const [],
    this.columnNames = const [],
    this.propertyNames = const [],
  });

  @override
  Widget build(BuildContext context) {
    return DataTable(
      columns: columnNames
          .map(
            (name) => DataColumn(
              label: Expanded(
                child: Text(
                  name,
                  style: TextStyle(fontStyle: FontStyle.italic),
                ),
              ),
            ),
          )
          .toList(),
      rows: jsonObjects
          .map(
            (obj) => DataRow(
              cells: propertyNames
                  .map(
                    (propName) => DataCell(
                      Text(obj[propName]),
                    ),
                  )
                  .toList(),
            ),
          )
          .toList(),
    );
  }
}
