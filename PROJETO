//https://api.themoviedb.org/3/discover/movie?api_key=5cfcb26280fab4a3855afa602bcee3e0
//https://mugenmonkey.com/api/v0/ds3_builds
//https://api.themoviedb.org/3/discover/tv?api_key=5cfcb26280fab4a3855afa602bcee3e0
import 'package:flutter/material.dart';
import 'package:flutter_hooks/flutter_hooks.dart';
import 'package:http/http.dart' as http;
import 'dart:convert';



enum TableStatus { idle, loading, ready, error }

//API
class DataService {
  int page = 1;

  final ValueNotifier<Map<String, dynamic>> tableStateNotifier = ValueNotifier({
    "objects": [],
    "props": [],
    "columns": [],
    'status': TableStatus.idle,
  });

  List<dynamic> objectsData = [];

  int selectedIndex = 0;

  void proximaPagina(){
    page++;
    carregar(selectedIndex);
  }


  void Paginaanterior(){
    page--;
    carregar(selectedIndex);
  }

  void carregar(index) {
    selectedIndex = index;
    final funcoes = [carregarjogos, carregarfilmes, carregartv];
    tableStateNotifier.value = {
      'status': TableStatus.loading,
      "objects": objectsData,
      "props": ["title", "original_language", "release_date"],
      "columns": [
        "Nome",
        "Idioma",
        "Lançamento",
      ]
    };

    funcoes[index]();
  }

  Future<void> carregarfilmes() async {
    var filmesUri = Uri(
        scheme: 'https',
        host: 'api.themoviedb.org',
        path: '/3/discover/movie',
        queryParameters: {
          'api_key': '5cfcb26280fab4a3855afa602bcee3e0',
          'language': 'pt-BR',
          'page': '$page',
        });

    print('carregarfilmes #1 - antes do await');
    var jsonString = await http.read(filmesUri);
    print('carregarfilmes #2 - depois do await');
    var filmesJson = jsonDecode(jsonString);

    var baseImageUrl = 'https://image.tmdb.org/t/p/w500';
    objectsData = filmesJson['results'];
    objectsData.forEach((film) {
      if (film['poster_path'] != null) {
        film['poster_path'] = baseImageUrl + film['poster_path'];
      }
    });
    tableStateNotifier.value = {
      'status': TableStatus.ready,
      "objects": objectsData,
      "props": [
        "title",
        "original_language",
        "release_date",
      ],
      "columns": [
        "Nome",
        "Idioma",
        "Lançamento",
      ]
    };
  }

  Future<void> carregartv() async {
    var TVUri = Uri(
        scheme: 'https',
        host: 'api.themoviedb.org',
        path: '/3/discover/tv',
        queryParameters: {
          'api_key': '5cfcb26280fab4a3855afa602bcee3e0',
          'language': 'pt-BR',
          'page': '$page'
        });

    print('carregarTV #1 - antes do await');
    var jsonString = await http.read(TVUri);
    print('carregarTV #2 - depois do await');
    var TVJson = jsonDecode(jsonString);

    var baseImageUrl = 'https://image.tmdb.org/t/p/w500';
    objectsData = TVJson['results'];
    objectsData.forEach((film) {
      if (film['poster_path'] != null) {
        film['poster_path'] = baseImageUrl + film['poster_path'];
      }
    });
    tableStateNotifier.value = {
      'status': TableStatus.ready,
      "objects": objectsData,
      "props": [
        "name",
        "original_language",
        "first_air_date",
      ],
      "columns": [
        "Nome",
        "Idioma",
        "Lançamento",
      ]
    };
  }

  Future<void> carregarjogos() async {
    var jogosUri = Uri(
      scheme: 'https',
      host: 'mugenmonkey.com',
      path: 'api/v0/ds3_builds',
      queryParameters: {'size': '15'},
    );

    print('carregarjogos #1 - antes do await');
    var jsonString = await http.read(jogosUri);
    print('carregarjogos #2 - depois do await');
    var jogosJson = jsonDecode(jsonString);
    objectsData = jogosJson['results'];

    tableStateNotifier.value = {
      'status': TableStatus.ready,
      "objects": objectsData,
      "props": [
        "key",
        "id",
        "starting_class",
      ],
      "columns": [
        "Nome",
        "Gênero",
        "Classe",
      ]
    };
  }
}

final dataService = DataService();

void main() {
  MyApp app = MyApp();

  runApp(app);
}

//CONTEUDO DO APP
class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      theme: ThemeData(
        primarySwatch: Colors.cyan,
        fontFamily: 'TimesNewRoman',
      ),
      debugShowCheckedModeBanner: false,
      home: Scaffold(
        backgroundColor: Colors.white,
        appBar: PreferredSize(
          preferredSize: Size.fromHeight(kToolbarHeight),
          child: Container(
            color: Colors.transparent,
            child: Container(
              width: 70,
              child: Row(
                children: [
                  PopupMenuButton<String>(
                    onSelected: (value) {
                      print('Opção selecionada: $value');
                    },
                    itemBuilder: (BuildContext context) {
                      return [
                        PopupMenuItem<String>(
                          value: 'Opção 1',
                          child: Text('Conta'),
                        ),
                        PopupMenuItem<String>(
                          value: 'Opção 2',
                          child: Text('Configurações'),
                        ),
                        PopupMenuItem<String>(
                          value: 'Opção 3',
                          child: Text('Log out'),
                        ),
                      ];
                    },
                  ),
                  SizedBox(width: 10),
                  ElevatedButton(
                    style: ElevatedButton.styleFrom(
                        primary: Colors.black,
                        shape: RoundedRectangleBorder(
                            borderRadius: BorderRadius.circular(45))),
                    onPressed: () {},
                    child: Text(
                      'App',
                      style: TextStyle(
                          color: Colors.white, fontStyle: FontStyle.italic),
                    ),
                  ),
                ],
              ),
            ),
          ),
        ),
        body: Column(
          children: [
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                IconButton(
                  icon: Icon(Icons.arrow_back),
                  onPressed: dataService.Paginaanterior,
                ),
                IconButton(
                  icon: Icon(Icons.arrow_forward),
                  onPressed: dataService.proximaPagina,
                ),
              ],
            ),
            Expanded(
              child: ValueListenableBuilder(
                valueListenable: dataService.tableStateNotifier,
                builder: (_, value, __) {
                  switch (value['status']) {
                    case TableStatus.idle:
                      return Center(
                        child: Column(
                          mainAxisAlignment: MainAxisAlignment.center,
                          children: [
                            Icon(
                              Icons.play_arrow_rounded,
                              size: 200,
                              color: Colors.cyanAccent,
                            ),
                            SizedBox(width: 10),
                            Text(
                              "Toque algum botão",
                              style: TextStyle(
                                  color: Colors.black87,
                                  fontWeight: FontWeight.bold,
                                  fontStyle: FontStyle.italic,
                                  fontFamily: 'TimesNewRoman',
                                  height: 2),
                            ),
                          ],
                        ),
                      );

                    case TableStatus.loading:
                      return Container(
                        alignment: Alignment.center,
                        child: CircularProgressIndicator(),
                      );

                    case TableStatus.ready:
                      return DataTableWidget(
                        jsonObjects: value["objects"],
                        columnNames: value["columns"] as List<dynamic>,
                        propertyNames: value["props"] as List<dynamic>,
                      );

                    case TableStatus.error:
                      return Text("Lascou");
                  }

                  return Text("...");
                },
              ),
            ),
          ],
        ),
        bottomNavigationBar: NewNavBar(
          itemSelectedCallback: dataService.carregar,
        ),
      ),
    );
  }
}

//BARRA INFERIOR
class NewNavBar extends HookWidget {
  final _itemSelectedCallback;

  NewNavBar({itemSelectedCallback})
      : _itemSelectedCallback = itemSelectedCallback ?? (int) {}

  @override
  Widget build(BuildContext context) {
    var state = useState(1);

    return BottomNavigationBar(
        onTap: (index) {
          state.value = index;

          _itemSelectedCallback(index);
        },
        currentIndex: state.value,
        items: const [
          BottomNavigationBarItem(
            label: "Jogos",
            icon: Icon(
              Icons.games_sharp,
              size: 25,
              color: Colors.cyan,
            ),
          ),
          BottomNavigationBarItem(
            label: "Filmes",
            icon: Icon(
              Icons.local_play_sharp,
              size: 25,
              color: Colors.cyan,
            ),
          ),
          BottomNavigationBarItem(
            label: "TV",
            icon: Icon(
              Icons.tv,
              size: 25,
              color: Colors.cyan,
            ),
          )
        ]);
  }
}

//TABELA
class DataTableWidget extends HookWidget {
  final List jsonObjects;
  final List columnNames;
  final List propertyNames;

  DataTableWidget({
    this.jsonObjects = const [],
    this.columnNames = const [],
    this.propertyNames = const [],
  });

  @override
  Widget build(BuildContext context) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Expanded(
          child: ListView.separated(
            padding: EdgeInsets.all(10),
            separatorBuilder: (_, __) => Divider(
              height: 5,
              thickness: 2,
              indent: 10,
              endIndent: 10,
              color: Colors.cyanAccent,
            ),
            itemCount: jsonObjects.length,
            itemBuilder: (_, index) {
              var rowData = jsonObjects[index];
              var title = rowData[propertyNames[0]];
              var content = propertyNames
                  .sublist(1)
                  .map((prop) => rowData[prop])
                  .join("  ");
              var imageUrl = rowData['poster_path'];

              return Card(
                shadowColor: Theme.of(context).primaryColor,
                child: Column(
                  children: [
                    SizedBox(height: 5),
                    Text(
                      "${title}\n",
                      style: TextStyle(
                          fontWeight: FontWeight.bold,
                          fontStyle: FontStyle.italic),
                    ),
                    imageUrl != null ? Image.network(imageUrl) : Container(),
                    Text(
                      content,
                      style: TextStyle(
                          fontWeight: FontWeight.bold,
                          fontStyle: FontStyle.italic),
                    ),
                    SizedBox(height: 10),
                  ],
                ),
              );
            },
          ),
        ),
      ],
    );
  }
}
//CLASSE CONTA
/*
class MyCustomForm extends StatefulWidget {
  const MyCustomForm({super.key});

  @override
  MyCustomFormState createState() {
    return MyCustomFormState();
  }
}

class MyCustomFormState extends State<MyCustomForm> {
  final _formKey = GlobalKey<FormState>();

  @override
  Widget build(BuildContext context) {
    return Form(
      key: _formKey,
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.center,
        children: [
          const SizedBox(
            height: 35,
          ),
          TextFormField(
            decoration: InputDecoration(
              border: OutlineInputBorder(
                borderRadius: BorderRadius.circular(68.0),
              ),
              labelText: 'Nome',
            ),
          ),
          const SizedBox(
            height: 5,
          ),
          TextFormField(
            decoration: InputDecoration(
              border: OutlineInputBorder(
                borderRadius: BorderRadius.circular(68.0),
                //borderSide: BorderSide(
                //  color: Colors.red,
                //  width: 10,
                //)
              ),
              labelText: 'Idade',
            ),
          ),
          const SizedBox(
            height: 5,
          ),
          TextFormField(
            decoration: InputDecoration(
              border: OutlineInputBorder(
                borderRadius: BorderRadius.circular(68.0),
              ),
              labelText: 'CPF',
            ),
          ),
          const SizedBox(
            height: 5,
          ),
          TextFormField(
            decoration: InputDecoration(
              border: OutlineInputBorder(
                borderRadius: BorderRadius.circular(68.0),
              ),
              labelText: 'Senha',
            ),
          ),
          Row(
            children: [
              const SizedBox(width: 50),
              Botao_2(),
              const SizedBox(width: 50),
              Botao_1(),
            ],
          ),
        ],
      ),
    );
  }
}

class Botao_1 extends StatelessWidget {
  const Botao_1({super.key});

  @override
  Widget build(BuildContext context) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 28.0),
      child: ElevatedButton(
        style: ButtonStyle(
            backgroundColor:
                MaterialStateProperty.all<Color>(Colors.cyanAccent)),
        onPressed: () {
          bool a = true;
          if (a = true) {
            ScaffoldMessenger.of(context).showSnackBar(
              const SnackBar(content: Text('Finalizado')),
            );
          }
        },
        child: const Text('Confirmar'),
      ),
    );
  }
}

class Botao_2 extends StatelessWidget {
  const Botao_2({super.key});

  @override
  Widget build(BuildContext context) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 1.0),
      child: ElevatedButton(
        style: ButtonStyle(
            backgroundColor:
                MaterialStateProperty.all<Color>(Colors.cyanAccent)),
        onPressed: () {
          bool a = true;
          if (a = true) {
            ScaffoldMessenger.of(context).showSnackBar(
              const SnackBar(content: Text('Enviado...')),
            );
          }
        },
        child: const Text('Enviar'),
      ),
    );
  }
}
*/
