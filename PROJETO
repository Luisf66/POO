//https://api.themoviedb.org/3/movie/550?api_key=3a39ee12e899993bc864c55c9fe1242d

import 'package:flutter/material.dart';
import 'package:flutter_hooks/flutter_hooks.dart';
import 'package:http/http.dart' as http;
import 'dart:convert';

class DataService {
  final ValueNotifier<Map<String, dynamic>> tableStateNotifier =
      new ValueNotifier({
    "objects": [],
    "props": ["name", "style", "ibu"],
    "columns": ["Info1", "Info2", "Info3"]
  });
  int selectedIndex = 0;
  void carregar(index) {
    var selectedIndex = index;
    if (index == 0) {
      carregaranimes();
    } else if (index == 1) {
      carregarseries();
    } else if (index == 2) {
      carregarfilmes();
    } else if (index == 3) {
      carregarfilmes();
    }
  }

  Future<void> carregarseries() async {
    var beersUri = Uri(
        scheme: 'https',
        host: 'random-data-api.com',
        path: 'api/beer/random_beer',
        queryParameters: {'size': '10'});

    print('carregarseries #1 - antes do await');
    var jsonString = await http.read(beersUri);
    print('carregarseries #2 - depois do await');
    var beersJson = jsonDecode(jsonString);

    tableStateNotifier.value = {
      "objects": beersJson,
      "props": ["name", "style", "ibu"],
      "columns": ["Nome", "Estilo", "IBU"]
    };
  }

  Future<void> carregarfilmes() async {
    var nacoesUri = Uri(
      scheme: 'https',
      host: 'random-data-api.com',
      path: 'api/nation/random_nation',
      queryParameters: {'size': '10'},
    );

    print('carregarfilmes #1 - antes do await');
    var jsonString = await http.read(nacoesUri);
    print('carregarfilmes #2 - depois do await');
    var nacoesJson = jsonDecode(jsonString);

    tableStateNotifier.value = {
      "objects": nacoesJson,
      "props": ["nationality", "language", "capital"],
      "columns": ["Nacionalidade", "Lingua", "Capital"]
    };
  }

  Future<void> carregaranimes() async {
    var cafesUri = Uri(
      scheme: 'https',
      host: 'random-data-api.com',
      path: 'api/coffee/random_coffee',
      queryParameters: {'size': '10'},
    );

    print('carregaranimes #1 - antes do await');
    var jsonString = await http.read(cafesUri);
    print('carregaranimes #2 - depois do await');
    var cafesJson = jsonDecode(jsonString);

    tableStateNotifier.value = {
      "objects": cafesJson,
      "props": ["blend_name", "origin", "variety"],
      "columns": ["Nome", "Origem", "Variedade"]
    };
  }
}

final dataService = DataService();

void main() {
  MyApp app = MyApp();

  runApp(app);
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      theme: ThemeData(
        primarySwatch: Colors.cyan,
        //brightness: Brightness.dark,
        fontFamily: 'TimesNewRoman',
      ),
      debugShowCheckedModeBanner: false,
      home: Scaffold(
        backgroundColor: Colors.white,
        appBar: PreferredSize(
          preferredSize: Size.fromHeight(kToolbarHeight),
          child: Container(
            color: Colors.transparent,
            child: Row(children: [
              IconButton(
                icon: Icon(
                  Icons.menu,
                  color: Colors.cyan,
                  size: 25,
                ),
                onPressed: () {
                  print("Bot√£o menu pressionado");
                },
              ),
              SizedBox(width: 5),
              Text(
                "App",
                style: TextStyle(
                  fontStyle: FontStyle.italic,
                  color: Colors.cyan,
                  fontSize: 20,
                ),
              )
            ]),
          ),
        ),
        body: ValueListenableBuilder(
          valueListenable: dataService.tableStateNotifier,
          builder: (_, value, __) {
            print(value);
            return ListviewWidget(
              jsonObjects: value["objects"] as List<dynamic>,
              propertyNames: value["props"] as List<dynamic>,
            );
          },
        ),
        bottomNavigationBar: NewNavBar(
          itemSelectedCallback: dataService.carregar,
        ),
      ),
    );
  }
}

class NewNavBar extends HookWidget {
  final _itemSelectedCallback;

  NewNavBar({itemSelectedCallback})
      : _itemSelectedCallback = itemSelectedCallback ?? (int) {}

  @override
  Widget build(BuildContext context) {
    return Container(
      height: kBottomNavigationBarHeight,
      child: Row(
        mainAxisAlignment: MainAxisAlignment.spaceAround,
        children: [
          _buildNavItem(0, Icons.play_arrow_sharp, "Animes"),
          _buildNavItem(1, Icons.tv, "Series"),
          _buildNavItem(2, Icons.local_play_sharp, "Filmes"),
          _buildNavItem(3, Icons.account_circle, "Conta"),
        ],
      ),
    );
  }

  Widget _buildNavItem(int index, IconData icon, String label) {
    var state = useState(1);
    return Expanded(
      child: GestureDetector(
        onTap: () {
          state.value = index;
          _itemSelectedCallback(index);
        },
        child: Row(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Icon(
              icon,
              size: 24,
              color: Colors.cyan,
            ),
            SizedBox(height: 4),
            Text(
              label,
              style: const TextStyle(
                fontSize: 12,
                fontStyle: FontStyle.italic,
              ),
            ),
          ],
        ),
      ),
    );
  }
}

class ListviewWidget extends HookWidget {
  final List jsonObjects;
  final List propertyNames;

  ListviewWidget({
    this.jsonObjects = const [],
    this.propertyNames = const [],
  });

  @override
  Widget build(BuildContext context) {
    return ListView.builder(
        itemCount: jsonObjects.length,
        itemBuilder: (context, index) {
          final obj = jsonObjects[index];
          return ListTile(
              title: Text(obj[propertyNames[0]] ?? ''),
              subtitle: Text(obj[propertyNames[1]] ?? ''));
        });
  }
}
