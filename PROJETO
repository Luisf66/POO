//https://api.themoviedb.org/3/discover/movie?api_key=5cfcb26280fab4a3855afa602bcee3e0
//https://mugenmonkey.com/api/v0/ds3_builds

import 'package:flutter/material.dart';
import 'package:flutter_hooks/flutter_hooks.dart';
import 'package:http/http.dart' as http;
import 'dart:convert';

class DataService {
  final ValueNotifier<Map<String, dynamic>> tableStateNotifier = ValueNotifier({
    "objects": [],
    "props": ["name", "style", "ibu"],
    "columns": []
  });

  List<dynamic> objectsData = [];

  int selectedIndex = 0;
  void carregar(index) {
    final funcoes = [carregarjogos, carregarfilmes, carregarNacoes];

    funcoes[index]();
  }

  Future<void> carregarfilmes() async {
    var filmesUri = Uri(
        scheme: 'https',
        host: 'api.themoviedb.org',
        path: '/3/discover/movie',
        queryParameters: {
          'api_key': '5cfcb26280fab4a3855afa602bcee3e0',
          'language': 'pt-BR'
        });

    print('carregarfilmes #1 - antes do await');
    var jsonString = await http.read(filmesUri);
    print('carregarfilmes #2 - depois do await');
    var filmesJson = jsonDecode(jsonString);

    var baseImageUrl = 'https://image.tmdb.org/t/p/w500';
    objectsData = filmesJson['results'];
    objectsData.forEach((film) {
      if (film['poster_path'] != null) {
        film['poster_path'] = baseImageUrl + film['poster_path'];
      }
    });
    tableStateNotifier.value = {
      "objects": objectsData,
      "props": ["title", "original_language", "release_date"],
      "columns": [
        "Nome",
        "Idioma",
        "Lançamento",
      ]
    };
  }

  Future<void> carregarNacoes() async {
    var nacoesUri = Uri(
      scheme: 'https',
      host: 'random-data-api.com',
      path: 'api/nation/random_nation',
      queryParameters: {'size': '15'},
    );

    print('carregarNacoes #1 - antes do await');
    var jsonString = await http.read(nacoesUri);
    print('carregarNacoes #2 - depois do await');
    var nacoesJson = jsonDecode(jsonString);

    tableStateNotifier.value = {
      "objects": nacoesJson,
      "props": ["nationality", "language", "capital"],
      "columns": ["Nacionalidade", "Lingua", "Capital"]
    };
  }

  Future<void> carregarjogos() async {
    var jogosUri = Uri(
      scheme: 'https',
      host: 'mugenmonkey.com',
      path: 'api/v0/ds3_builds',
      queryParameters: {'size': '15'},
    );

    print('carregarjogos #1 - antes do await');
    var jsonString = await http.read(jogosUri);
    print('carregarjogos #2 - depois do await');
    var jogosJson = jsonDecode(jsonString);
    objectsData = jogosJson['results'];

    tableStateNotifier.value = {
      "objects": objectsData,
      "props": ["key", "id", "starting_class"],
      "columns": ["Nome", "Gênero", "Classe"]
    };
  }
}

final dataService = DataService();

void main() {
  MyApp app = MyApp();

  runApp(app);
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      theme: ThemeData(
        primarySwatch: Colors.cyan,
        fontFamily: 'TimesNewRoman',
      ),
      debugShowCheckedModeBanner: false,
      home: Scaffold(
        backgroundColor: Colors.white,
        appBar: PreferredSize(
          preferredSize: Size.fromHeight(kToolbarHeight),
          child: Container(
            color: Colors.transparent,
            child: Container(
              width: 70,
              child: Row(
                children: [
                  PopupMenuButton<String>(
                    onSelected: (value) {
                      print('Opção selecionada: $value');
                    },
                    itemBuilder: (BuildContext context) {
                      return [
                        PopupMenuItem<String>(
                          value: 'Opção 1',
                          child: Text('Conta'),
                        ),
                        PopupMenuItem<String>(
                          value: 'Opção 2',
                          child: Text('Configurações'),
                        ),
                        PopupMenuItem<String>(
                          value: 'Opção 3',
                          child: Text('Log out'),
                        ),
                      ];
                    },
                  ),
                  SizedBox(width: 10),
                  ElevatedButton(
                    style: ElevatedButton.styleFrom(
                        primary: Colors.black,
                        shape: RoundedRectangleBorder(
                            borderRadius: BorderRadius.circular(45))),
                    onPressed: () {},
                    child: Text(
                      'App',
                      style: TextStyle(
                          color: Colors.white, fontStyle: FontStyle.italic),
                    ),
                  ),
                ],
              ),
            ),
          ),
        ),
        body: ValueListenableBuilder(
          valueListenable: dataService.tableStateNotifier,
          builder: (_, value, __) {
            //final jsonObjects = (value["objects"] as Map<String, dynamic>).values.toList();

            print(value);
            return DataTableWidget(
              jsonObjects: value["objects"],
              columnNames: value["columns"] as List<dynamic>,
              propertyNames: value["props"] as List<dynamic>,
            );
          },
        ),
        bottomNavigationBar: NewNavBar(
          itemSelectedCallback: dataService.carregar,
        ),
      ),
    );
  }
}

class NewNavBar extends HookWidget {
  final _itemSelectedCallback;

  NewNavBar({itemSelectedCallback})
      : _itemSelectedCallback = itemSelectedCallback ?? (int) {}

  @override
  Widget build(BuildContext context) {
    var state = useState(1);

    return BottomNavigationBar(
        onTap: (index) {
          state.value = index;

          _itemSelectedCallback(index);
        },
        currentIndex: state.value,
        items: const [
          BottomNavigationBarItem(
            label: "Jogos",
            icon: Icon(
              Icons.games_sharp,
              size: 25,
            ),
          ),
          BottomNavigationBarItem(
            label: "Filmes",
            icon: Icon(
              Icons.local_play_sharp,
              size: 25,
            ),
          ),
          BottomNavigationBarItem(
            label: "---",
            icon: Icon(
              Icons.playlist_add_check_circle_sharp,
              size: 25,
            ),
          )
        ]);
  }
}

class DataTableWidget extends HookWidget {
  final List jsonObjects;
  final List columnNames;
  final List propertyNames;

  DataTableWidget({
    this.jsonObjects = const [],
    this.columnNames = const [],
    this.propertyNames = const [],
  });

  @override
  Widget build(BuildContext context) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Expanded(
          child: ListView.separated(
            padding: EdgeInsets.all(10),
            separatorBuilder: (_, __) => Divider(
              height: 5,
              thickness: 2,
              indent: 10,
              endIndent: 10,
              color: Colors.cyanAccent,
            ),
            itemCount: jsonObjects.length,
            itemBuilder: (_, index) {
              var rowData = jsonObjects[index];
              var title = rowData[propertyNames[0]];
              var content = propertyNames
                  .sublist(1)
                  .map((prop) => rowData[prop])
                  .join("  ");
              var imageUrl = rowData['poster_path'];

              return Card(
                shadowColor: Theme.of(context).primaryColor,
                child: Column(
                  children: [
                    SizedBox(height: 5),
                    Text(
                      "${title}\n",
                      style: TextStyle(
                          fontWeight: FontWeight.bold,
                          fontStyle: FontStyle.italic),
                    ),
                    imageUrl != null ? Image.network(imageUrl) : Container(),
                    Text(content),
                    SizedBox(height: 10),
                  ],
                ),
              );
            },
          ),
        ),
      ],
    );
  }
}
