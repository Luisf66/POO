import 'package:flutter/material.dart';
import 'package:flutter_hooks/flutter_hooks.dart';
import '../data/data_service.dart';

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
        theme: ThemeData(primarySwatch: Colors.deepPurple),
        debugShowCheckedModeBanner: false,
        home: Scaffold(
          appBar: AppBar(
              title: Row(
                children: [
                  Text("Dicas"),
                  SizedBox(width: 10),
                  Expanded(
                    child: TextField(
                      onChanged: (value) {
                        dataService.searchTerm = value;
                      },
                      decoration: InputDecoration(
                        hintText: 'Buscar...',
                        border: InputBorder.none,
                      ),
                    ),
                  ),
                ],
              ),
              actions: [
                PopupMenuButton(
                  itemBuilder: (_) => [3, 7, 15]
                      .map((num) => PopupMenuItem(
                            value: num,
                            child: Text("Carregar $num itens por vez"),
                          ))
                      .toList(),
                  onSelected: (number) {
                    dataService.numberOfItems = number;
                  },
                )
              ]),
          body: ValueListenableBuilder(
              valueListenable: dataService.tableStateNotifier,
              builder: (_, value, __) {
                switch (value['status']) {
                  case TableStatus.idle:
                    return Center(child: Text("Toque em algum botão"));
                  case TableStatus.loading:
                    return Center(child: CircularProgressIndicator());
                  case TableStatus.ready:
                    return SingleChildScrollView(
                        child: DataTableWidget(
                      jsonObjects: value['dataObjects'] ?? [],
                      propertyNames: value['propertyNames'],
                      columnNames: value['columnNames'],
                      sortCallback: dataService.ordenarEstadoAtual,
                    ));
                  case TableStatus.error:
                    return Text("Lascou");
                }
                return Text("...");
              }),
          bottomNavigationBar:
              NewNavBar(itemSelectedCallback: dataService.carregar),
        ));
  }
}

class NewNavBar extends HookWidget {
  final _itemSelectedCallback;
  NewNavBar({itemSelectedCallback})
      : _itemSelectedCallback = itemSelectedCallback ?? (int) {}

  @override
  Widget build(BuildContext context) {
    var state = useState(1);

    return BottomNavigationBar(
        onTap: (index) {
          state.value = index;
          _itemSelectedCallback(index);
        },
        currentIndex: state.value,
        items: const [
          BottomNavigationBarItem(
            label: "Sangue",
            icon: Icon(Icons.bloodtype),
          ),
          BottomNavigationBarItem(
              label: "Contas", icon: Icon(Icons.account_box)),
          BottomNavigationBarItem(label: "Banco", icon: Icon(Icons.food_bank))
        ]);
  }
}

void _empty(String, bool) {}

class DataTableWidget extends StatelessWidget {
  final _sortCallback;
  final List jsonObjects;
  final List<String> columnNames;
  final List<String> propertyNames;
  final highlight;

  TextSpan _makeRichText(String text) {
    final String searchTerm = dataService.searchTerm;
    if (searchTerm.isEmpty) {
      return TextSpan(text: text);
    }
    return dataService.makeRichText(
        text, searchTerm); // Utiliza a função `makeRichText` do `DataService`
  }

  TextSpan _makeRichTextWithHighlight(String text, String highlight) {
    final List<String> splitted = text.split(highlight);
    List<TextSpan> textSpans = [];
    for (int i = 0; i < splitted.length; i++) {
      if (splitted[i].isNotEmpty) {
        textSpans.add(TextSpan(text: splitted[i]));
      }
      if (i < splitted.length - 1) {
        textSpans.add(TextSpan(
            text: highlight, style: TextStyle(fontWeight: FontWeight.bold)));
      }
    }
    return TextSpan(children: textSpans);
  }

  DataTableWidget(
      {this.jsonObjects = const [],
      this.columnNames = const [],
      this.propertyNames = const [],
      this.highlight,
      sortCallback})
      : _sortCallback = sortCallback ?? _empty;

  @override
  Widget build(BuildContext context) {
    return DataTable(
        columns: columnNames
            .map((name) => DataColumn(
                onSort: (columnIndex, ascending) =>
                    _sortCallback(propertyNames[columnIndex], ascending)
                //dataService.ordenarEstadoAtual(propertyNames[columnIndex]),
                ,
                label: Expanded(
                    child: Text(name,
                        style: TextStyle(fontStyle: FontStyle.italic)))))
            .toList(),
        rows: jsonObjects
            .map((obj) => DataRow(
                cells: propertyNames
                    .map((propName) => DataCell(Text(obj[propName])))
                    .toList()))
            .toList());
  }
}
