import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'dart:convert';
import '../util/ordenador.dart';
import './models.dart';

class FuncionarioDoMes extends Decididor {
  final String propriedade;
  final bool crescente;

  FuncionarioDoMes(this.propriedade, [this.crescente = true]);

  @override
  bool precisaTrocarAtualPeloProximo(atual, proximo) {
    try {
      final ordemCorreta = crescente ? [atual, proximo] : [proximo, atual];
      return ordemCorreta[0][propriedade]
              .compareTo(ordemCorreta[1][propriedade]) >
          0;
    } catch (error) {
      return false;
    }
  }
}

class DecididorCervejaNomeCrescente extends Decididor {
  @override
  bool precisaTrocarAtualPeloProximo(atual, proximo) {
    try {
      return atual["name"].compareTo(proximo["name"]) > 0;
    } catch (error) {
      return false;
    }
  }
}

class DecididorCervejaNomeDecrescente extends Decididor {
  @override
  bool precisaTrocarAtualPeloProximo(atual, proximo) {
    try {
      return atual["name"].compareTo(proximo["name"]) < 0;
    } catch (error) {
      return false;
    }
  }
}

class DecididorCervejaEstiloCrescente extends Decididor {
  @override
  bool precisaTrocarAtualPeloProximo(atual, proximo) {
    try {
      return atual["style"].compareTo(proximo["style"]) > 0;
    } catch (error) {
      return false;
    }
  }
}

class DecididorCervejaEstiloDecrescente extends Decididor {
  @override
  bool precisaTrocarAtualPeloProximo(atual, proximo) {
    try {
      return atual["style"].compareTo(proximo["style"]) < 0;
    } catch (error) {
      return false;
    }
  }
}

enum TableStatus { idle, loading, ready, error }

enum ItemType {
  users,
  blood_types,
  banks,
  none;

  String get asString => '$name';
  List<String> get columns => this == blood_types
      ? ["Grupo", "RH", "Tipo"]
      : this == users
          ? ["Nome", "Nick", "Senha"]
          : this == banks
              ? ["Conta", "Nome", "ID", "Swift Bic"]
              : [];
  List<String> get properties => this == blood_types
      ? ["group", "rh_factor", "type"]
      : this == users
          ? ["first_name", "username", "password"]
          : this == banks
              ? ["account_number", "bank_name", "routing_number", "swift_bic"]
              : [];
}

class DataService {
  static const MAX_N_ITEMS = 15;
  static const MIN_N_ITEMS = 3;
  static const DEFAULT_N_ITEMS = 7;

  Beer beerData = Beer();
  Coffee coffeeData = Coffee();
  Nation nationData = Nation();

  int _numberOfItems = DEFAULT_N_ITEMS;

  set numberOfItems(n) {
    _numberOfItems = n < 0
        ? MIN_N_ITEMS
        : n > MAX_N_ITEMS
            ? MAX_N_ITEMS
            : n;
  }

////BUSCA
  String _searchTerm = '';
  set searchTerm(String term) {
    _searchTerm = term;
    carregarPorTipo(tableStateNotifier.value['itemType']);
  }

  String get searchTerm => _searchTerm;

//////FILTRAGEM
  List<dynamic> filtrarDadosPorBusca(List<dynamic> dados, String termoBusca) {
    if (termoBusca.isEmpty) {
      return dados;
    }

    return dados.where((obj) {
      for (var prop in obj.values) {
        if (prop.toString().toLowerCase().contains(termoBusca.toLowerCase())) {
          return true;
        }
      }
      return false;
    }).toList();
  }

  TextSpan makeRichText(String text, String highlight) {
    final List<String> splitted = text.split(highlight);
    return TextSpan(
      children: splitted.map((s) {
        if (s == "") {
          return TextSpan(
              text: highlight, style: TextStyle(fontWeight: FontWeight.bold));
        } else {
          return TextSpan(text: s);
        }
      }).toList(),
    );
  }

  final ValueNotifier<Map<String, dynamic>> tableStateNotifier = ValueNotifier({
    'status': TableStatus.idle,
    'dataObjects': [],
    'itemType': ItemType.none
  });

  void carregar(index) {
    final params = [ItemType.blood_types, ItemType.users, ItemType.banks];
    carregarPorTipo(params[index]);
  }

  void ordenarEstadoAtual(final String propriedade, [bool crescente = true]) {
    print("$propriedade -- $crescente");
    List objetos = tableStateNotifier.value['dataObjects'] ?? [];
    if (objetos == []) return;
    Ordenador ord = Ordenador();
    Decididor d = FuncionarioDoMes(propriedade, crescente);
    var objetosOrdenados = ord.ordenarFuderoso(objetos, d);

    emitirEstadoOrdenado(objetosOrdenados, propriedade);
  }

  Uri montarUri(ItemType type) {
    return Uri(
        scheme: 'https',
        host: 'random-data-api.com',
        path: 'api/v2/${type.asString}',
        queryParameters: {'size': '$_numberOfItems'});
  }

  Future<List<dynamic>> acessarApi(Uri uri) async {
    var jsonString = await http.read(uri);
    var json = jsonDecode(jsonString);
    json = [...tableStateNotifier.value['dataObjects'], ...json];
    return json;
  }

  void emitirEstadoOrdenado(List objetosOrdenados, String propriedade) {
    var estado = {...tableStateNotifier.value};
    estado['dataObjects'] = objetosOrdenados;
    estado['sortCriteria'] = propriedade;
    estado['ascending'] = true;
    tableStateNotifier.value = estado;
  }

  void emitirEstadoCarregando(ItemType type) {
    tableStateNotifier.value = {
      'status': TableStatus.loading,
      'dataObjects': [],
      'itemType': type
    };
  }

  void emitirEstadoPronto(ItemType type, var json) {
    var searchTerm = tableStateNotifier.value['searchTerm'] ?? '';
    var dadosFiltrados = filtrarDadosPorBusca(json, searchTerm);

    Map<String, dynamic>? dataObject = null;
    if (dadosFiltrados.isNotEmpty) {
      dataObject = dadosFiltrados[0];
    }

    if (type == ItemType.blood_types) {
      beerData.copy(dataObject!);
    } else if (type == ItemType.users) {
      coffeeData.copy(dataObject!);
    } else if (type == ItemType.banks) {
      nationData.copy(dataObject!);
    }

    tableStateNotifier.value = {
      'itemType': type,
      'status': TableStatus.ready,
      'dataObjects': dadosFiltrados,
      'propertyNames': type.properties,
      'columnNames': type.columns,
      'searchTerm': searchTerm,
    };
  }

  bool temRequisicaoEmCurso() =>
      tableStateNotifier.value['status'] == TableStatus.loading;
  bool mudouTipoDeItemRequisitado(ItemType type) =>
      tableStateNotifier.value['itemType'] != type;

  void carregarPorTipo(ItemType type) async {
    if (temRequisicaoEmCurso()) return;
    if (mudouTipoDeItemRequisitado(type)) {
      emitirEstadoCarregando(type);
    }
    var uri = montarUri(type);
    if (_searchTerm.isNotEmpty) {
      uri = uri.replace(
          queryParameters: {'size': '$_numberOfItems', 'search': _searchTerm});
    }
    var json = await acessarApi(uri);
    var dadosFiltrados = filtrarDadosPorBusca(json, _searchTerm);

    if (type == ItemType.blood_types) {
      // Atribuir dados a beerData
      beerData.copy(dadosFiltrados[0]);
    } else if (type == ItemType.users) {
      // Atribuir dados a coffeeData
      coffeeData.copy(dadosFiltrados[0]);
    } else if (type == ItemType.banks) {
      // Atribuir dados a nationData
      nationData.copy(dadosFiltrados[0]);
    }
    emitirEstadoPronto(type, dadosFiltrados);
  }
}

final dataService = DataService();
